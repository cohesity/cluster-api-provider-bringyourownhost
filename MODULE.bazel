bazel_dep(name = "aspect_bazel_lib", version = "2.21.1")
bazel_dep(name = "aspect_rules_lint", version = "1.6.0")
bazel_dep(name = "buildifier_prebuilt", version = "8.2.0.2")
bazel_dep(name = "bazel_skylib", version = "1.8.1")
bazel_dep(name = "rules_multitool", version = "1.9.0")
bazel_dep(name = "bazel_env.bzl", version = "0.5.0")
bazel_dep(name = "bazelrc-preset.bzl", version = "1.2.0")
bazel_dep(name = "rules_go", version = "0.57.0")
bazel_dep(name = "gazelle", version = "0.45.0")
bazel_dep(name = "rules_shell", version = "0.6.0")
bazel_dep(name = "rules_oci", version = "2.2.6")
bazel_dep(name = "tar.bzl", version = "0.5.5")
bazel_dep(name = "platforms", version = "1.0.0")
bazel_dep(name = "rules_multirun", version = "0.12.0")

multitool = use_extension("@rules_multitool//multitool:extension.bzl", "multitool")
multitool.hub(lockfile = "//tools:tools.lock.json")
use_repo(multitool, "multitool")

#########################
# Go
go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")

# Download an SDK for the host OS & architecture as well as common remote execution
# platforms, using the version given from the `go.mod` file.
go_sdk.from_file(go_mod = "//:go.mod")
go_sdk.nogo(nogo = "//tools/lint:nogo")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")
go_deps.gazelle_default_attributes(
    build_extra_args = [
        "-go_naming_convention_external=go_default_library",
    ],
    build_file_generation = "auto",
    directives = [
        "gazelle:proto disable",
    ],
)

# All *direct* Go dependencies of the module have to be listed explicitly.
# Run 'bazel mod tidy' to update this
use_repo(
    go_deps,
    "com_github_docker_cli",
    "com_github_docker_docker",
    "com_github_go_logr_logr",
    "com_github_jackpal_gateway",
    "com_github_kube_vip_kube_vip",
    "com_github_maxbrunsfeld_counterfeiter_v6",
    "com_github_mikefarah_yq_v4",
    "com_github_onsi_ginkgo_v2",
    "com_github_onsi_gomega",
    "com_github_pkg_errors",
    "com_github_spf13_pflag",
    "io_k8s_api",
    "io_k8s_apimachinery",
    "io_k8s_client_go",
    "io_k8s_cluster_bootstrap",
    "io_k8s_component_base",
    "io_k8s_klog_v2",
    "io_k8s_sigs_cluster_api",
    "io_k8s_sigs_cluster_api_test",
    "io_k8s_sigs_controller_runtime",
    "io_k8s_sigs_controller_tools",
    "io_k8s_sigs_kustomize_kustomize_v5",
    "io_k8s_sigs_structured_merge_diff_v4",
    "io_k8s_sigs_yaml",
    "io_k8s_utils",
    "org_golang_x_tools",
    "org_golang_x_tools_gopls",
)

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

# Base image for GO Containers.
oci.pull(
    name = "distroless_base",
    digest = "sha256:1951bedd9ab20dd71a5ab11b3f5a624863d7af4109f299d62289928b9e311d5d",
    image = "gcr.io/distroless/base",
    platforms = [
        "linux/amd64",
        "linux/arm64",
    ],
)
use_repo(oci, "distroless_base", "distroless_base_linux_amd64", "distroless_base_linux_arm64")
